generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String         @id @default(cuid())
  email             String         @unique
  password          String
  firstName         String
  lastName          String
  department        String
  createdAt         DateTime       @default(now())
  leaveBalance      Float          @default(20)
  updatedAt         DateTime       @updatedAt
  role              Role           @default(EMPLOYEE)
  accounts          Account[]
  comments          Comment[]
  approvedRequests  LeaveRequest[] @relation("Approver")
  leaveRequests     LeaveRequest[]
  sessions          Session[]
  supervisedRequests LeaveRequest[] @relation("Supervisor")
  directedRequests  LeaveRequest[] @relation("Director")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LeaveRequest {
  id          String      @id @default(cuid())
  userId      String
  type        LeaveType
  startDate   DateTime
  endDate     DateTime
  reason      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  approverId  String?
  attachments String[]
  qrCode      String?
  status      LeaveStatus @default(PENDING)
  isUrgent    Boolean     @default(false)
  autoApproved Boolean    @default(false)
  supervisorId String?
  directorId  String?
  comments    Comment[]
  approver    User?       @relation("Approver", fields: [approverId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  supervisor  User?       @relation("Supervisor", fields: [supervisorId], references: [id])
  director    User?       @relation("Director", fields: [directorId], references: [id])
}

model Comment {
  id             String       @id @default(cuid())
  content        String
  createdAt      DateTime     @default(now())
  leaveRequestId String
  userId         String
  leaveRequest   LeaveRequest @relation(fields: [leaveRequestId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

enum LeaveType {
  ANNUAL
  SICK
  PARENTAL
  COMPASSIONATE
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum Role {
  EMPLOYEE
  SUPERVISOR
  HR
  ADMIN
}
